apiVersion: v1
kind: ConfigMap
metadata:
  name: golang-files
data:
  main.go: |
    package main
    import (
        "github.com/gin-gonic/gin"
        "fmt"
    )
    func main() {
        r := gin.Default()
        r.GET("/", func(c *gin.Context) {
            c.JSON(200, gin.H{
                "message": "pong",
            })
        })
        r.GET("/server", func(c *gin.Context) {
            c.JSON(200, gin.H{
                "header": c.Request.Header,
            })
            fmt.Print(c.Request.Header);
        })
        r.Run("0.0.0.0:80")
    }
---
apiVersion: v1
kind: Pod
metadata:
  name: golang
  labels:
    app.kubernetes.io/name: test-golang
    app.kubernetes.io/instance: test-golang
spec:
  containers:
  - name: golang
    image: golang:1.15.6
    ports:
      - name: http
        containerPort: 80
        protocol: TCP
    stdin: true
    tty: true
    volumeMounts:
      - name: "golang"
        mountPath: /opt
  volumes:
  - name: "golang"
    configMap:
      name: "golang-files"
---
apiVersion: v1
kind: Service
metadata:
  name: golang
  labels:
    app.kubernetes.io/name: test-golang
    app.kubernetes.io/instance: test-golang
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: test-golang
    app.kubernetes.io/instance: test-golang
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: golang
  labels:
    app.kubernetes.io/name: test-golang
    app.kubernetes.io/instance: test-golang
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      real_ip_header x-forwarded-for;
      set_real_ip_from 0.0.0.0/0;
spec:
  rules:
    - host: "example.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: golang
              servicePort: 80

